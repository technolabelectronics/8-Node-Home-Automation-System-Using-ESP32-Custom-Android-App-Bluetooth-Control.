#include <BluetoothSerial.h>
#include <AceButton.h>
using namespace ace_button;

BluetoothSerial SerialBT;

#define RelayPin1 23  
#define RelayPin2 22
#define RelayPin3 21 
#define RelayPin4 19
#define RelayPin5 18  
#define RelayPin6 5
#define RelayPin7 17  
#define RelayPin8 16  

#define SwitchPin1 34
#define SwitchPin2 35  
#define SwitchPin3 32  
#define SwitchPin4 33  
#define SwitchPin5 25
#define SwitchPin6 26  
#define SwitchPin7 27  
#define SwitchPin8 14  

int toggleState_1 = 1;
int toggleState_2 = 1;
int toggleState_3 = 1;
int toggleState_4 = 1;
int toggleState_5 = 1;
int toggleState_6 = 1;
int toggleState_7 = 1;
int toggleState_8 = 1;

char bt_data;

ButtonConfig config1;
AceButton button1(&config1);
ButtonConfig config2;
AceButton button2(&config2);
ButtonConfig config3;
AceButton button3(&config3);
ButtonConfig config4;
AceButton button4(&config4);
ButtonConfig config5;
AceButton button5(&config5);
ButtonConfig config6;
AceButton button6(&config6);
ButtonConfig config7;
AceButton button7(&config7);
ButtonConfig config8;
AceButton button8(&config8);

void handleEvent1(AceButton*, uint8_t, uint8_t);
void handleEvent2(AceButton*, uint8_t, uint8_t);
void handleEvent3(AceButton*, uint8_t, uint8_t);
void handleEvent4(AceButton*, uint8_t, uint8_t);
void handleEvent5(AceButton*, uint8_t, uint8_t);
void handleEvent6(AceButton*, uint8_t, uint8_t);
void handleEvent7(AceButton*, uint8_t, uint8_t);
void handleEvent8(AceButton*, uint8_t, uint8_t);


void Bluetooth_handle()
{
  bt_data = SerialBT.read();
  delay(20);

  switch(bt_data)
      {
    case 'a': digitalWrite(RelayPin1, LOW); toggleState_1 = 0; break; // if 'w' received Turn on Relay1
    case 'A': digitalWrite(RelayPin1, HIGH); toggleState_1 = 1; break; // if 'W' received Turn off Relay1
    case 'b': digitalWrite(RelayPin2, LOW); toggleState_2 = 0; break; // if 'x' received Turn on Relay2
    case 'B': digitalWrite(RelayPin2, HIGH); toggleState_2 = 1; break; // if 'X' received Turn off Relay2
    case 'c': digitalWrite(RelayPin3, LOW); toggleState_3 = 0; break; // if 'y' received Turn on Relay3
    case 'C': digitalWrite(RelayPin3, HIGH); toggleState_3 = 1; break; // if 'Y' received Turn off Relay3
    case 'd': digitalWrite(RelayPin4, LOW); toggleState_4 = 0; break; // if 'z' received Turn on Relay4
    case 'D': digitalWrite(RelayPin4, HIGH); toggleState_4 = 1; break; // if 'Z' received Turn off Relay4
    case 'e': digitalWrite(RelayPin5, LOW); toggleState_5 = 0; break; // if 'u' received Turn on Relay5
    case 'E': digitalWrite(RelayPin5, HIGH); toggleState_5 = 1; break; // if 'U' received Turn off Relay5
    case 'f': digitalWrite(RelayPin6, LOW); toggleState_6 = 0; break; // if 'v' received Turn on Relay6
    case 'F': digitalWrite(RelayPin6, HIGH); toggleState_6 = 1; break; // if 'V' received Turn off Relay6
    case 'g': digitalWrite(RelayPin7, LOW); toggleState_7 = 0; break; // if 'q' received Turn on Relay7
    case 'G': digitalWrite(RelayPin7, HIGH); toggleState_7 = 1; break; // if 'Q' received Turn off Relay7
    case 'h': digitalWrite(RelayPin8, LOW); toggleState_8 = 0; break; // if 'r' received Turn on Relay8
    case 'H': digitalWrite(RelayPin8, HIGH); toggleState_8 = 1; break; // if 'R' received Turn off Relay8
    default : break;
      }

  // Print received Bluetooth data to serial monitor
  Serial.println(bt_data);
}

void setup()
{
  Serial.begin(9600);
  btStart();  
  SerialBT.begin("technolab Smart Home"); //Bluetooth device name
  Serial.println("The device started, now you can pair it with bluetooth!");
  delay(5000);

  pinMode(RelayPin1, OUTPUT);
  pinMode(RelayPin2, OUTPUT);
  pinMode(RelayPin3, OUTPUT);
  pinMode(RelayPin4, OUTPUT);
  pinMode(RelayPin5, OUTPUT);
  pinMode(RelayPin6, OUTPUT);
  pinMode(RelayPin7, OUTPUT);
  pinMode(RelayPin8, OUTPUT);

  pinMode(SwitchPin1, INPUT_PULLUP);
  pinMode(SwitchPin2, INPUT_PULLUP);
  pinMode(SwitchPin3, INPUT_PULLUP);
  pinMode(SwitchPin4, INPUT_PULLUP);
  pinMode(SwitchPin5, INPUT_PULLUP);
  pinMode(SwitchPin6, INPUT_PULLUP);
  pinMode(SwitchPin7, INPUT_PULLUP);
  pinMode(SwitchPin8, INPUT_PULLUP);

  digitalWrite(RelayPin1, toggleState_1);
  digitalWrite(RelayPin2, toggleState_2);
  digitalWrite(RelayPin3, toggleState_3);
  digitalWrite(RelayPin4, toggleState_4);
  digitalWrite(RelayPin5, toggleState_5);
  digitalWrite(RelayPin6, toggleState_6);
  digitalWrite(RelayPin7, toggleState_7);
  digitalWrite(RelayPin8, toggleState_8);
 
  config1.setEventHandler(button1Handler);
  config2.setEventHandler(button2Handler);
  config3.setEventHandler(button3Handler);
  config4.setEventHandler(button4Handler);
  config5.setEventHandler(button5Handler);
  config6.setEventHandler(button6Handler);
  config7.setEventHandler(button7Handler);
  config8.setEventHandler(button8Handler);

  button1.init(SwitchPin1);
  button2.init(SwitchPin2);
  button3.init(SwitchPin3);
  button4.init(SwitchPin4);
  button5.init(SwitchPin5);
  button6.init(SwitchPin6);
  button7.init(SwitchPin7);
  button8.init(SwitchPin8);
}

void loop()
{  
  if (SerialBT.available()){
   Bluetooth_handle();
 }

  button1.check();
  button2.check();
  button3.check();
  button4.check();
  button5.check();
  button6.check();
  button7.check();
  button8.check();

  
  if (Serial.available()) {
    String data = Serial.readStringUntil('\n'); 
    SerialBT.println(data); 
  }
}

void button1Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  switch (eventType) {
    case AceButton::kEventPressed:
      toggleState_1 = 0;
      digitalWrite(RelayPin1, LOW);
      SerialBT.println("a");
      break;
    case AceButton::kEventReleased:
      toggleState_1 = 1;
      digitalWrite(RelayPin1, HIGH);
      SerialBT.println("A");
      break;
  }
}

void button2Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  switch (eventType) {
    case AceButton::kEventPressed:
      toggleState_2 = 0;
      digitalWrite(RelayPin2, LOW);
      SerialBT.println("b");
      break;
    case AceButton::kEventReleased:
      toggleState_2 = 1;
      digitalWrite(RelayPin2, HIGH);
      SerialBT.println("B");
      break;
  }
}

void button3Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  switch (eventType) {
    case AceButton::kEventPressed:
      toggleState_3 = 0;
      digitalWrite(RelayPin3, LOW);
      SerialBT.println("c");
      break;
    case AceButton::kEventReleased:
      toggleState_3 = 1;
      digitalWrite(RelayPin3, HIGH);
      SerialBT.println("C");
      break;
  }
}

void button4Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  switch (eventType) {
    case AceButton::kEventPressed:
      toggleState_4 = 0;
      digitalWrite(RelayPin4, LOW);
      SerialBT.println("d");
      break;
    case AceButton::kEventReleased:
      toggleState_4 = 1;
      digitalWrite(RelayPin4, HIGH);
      SerialBT.println("D");
      break;
  }
}

void button5Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  switch (eventType) {
    case AceButton::kEventPressed:
      toggleState_5 = 0;
      digitalWrite(RelayPin5, LOW);
      SerialBT.println("e");
      break;
    case AceButton::kEventReleased:
      toggleState_5 = 1;
      digitalWrite(RelayPin5, HIGH);
      SerialBT.println("E");
      break;
  }
}

void button6Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  switch (eventType) {
    case AceButton::kEventPressed:
      toggleState_6 = 0;
      digitalWrite(RelayPin6, LOW);
      SerialBT.println("f");
      break;
    case AceButton::kEventReleased:
      toggleState_6 = 1;
      digitalWrite(RelayPin6, HIGH);
      SerialBT.println("F");
      break;
  }
}

void button7Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  switch (eventType) {
    case AceButton::kEventPressed:
      toggleState_7 = 0;
      digitalWrite(RelayPin7, LOW);
      SerialBT.println("g");
      break;
    case AceButton::kEventReleased:
      toggleState_7 = 1;
      digitalWrite(RelayPin7, HIGH);
      SerialBT.println("G");
      break;
  }
}

void button8Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  switch (eventType) {
    case AceButton::kEventPressed:
      toggleState_8 = 0;
      digitalWrite(RelayPin8, LOW);
      SerialBT.println("h");
      break;
    case AceButton::kEventReleased:
      toggleState_8 = 1;
      digitalWrite(RelayPin8, HIGH);
      SerialBT.println("H");
      break;
  }
}